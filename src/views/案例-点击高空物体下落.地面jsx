import { useEffect } from 'react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import * as dat from 'dat.gui';
import gsap from 'gsap';

const Page = () => {
  useEffect(() => {
    const $ = {
      createScene () {
        const canvas = document.getElementById('c')

        const width = window.innerWidth;
        const height = window.innerHeight;

        canvas.width = width
        canvas.height = height
        // 挂载全局上
        this.canvas = canvas
        this.width = width
        this.height = height

        // 创建3D场景对象
        const scene = new THREE.Scene();
        this.scene = scene
      },
      // 创建立方体对象
      createObjects () {
        const texture = new THREE.TextureLoader().load('/src/assets/textures/1.jpg')

        texture.colorSpace = THREE.SRGBColorSpace; // 开启空间色彩管理

        const box = new THREE.Mesh(
          new THREE.BoxGeometry(4, 4, 4),
          new THREE.MeshBasicMaterial({
            map: texture,
          })
        )
        box.position.y = 10;

        // 地板
        const groud = new THREE.Mesh(
          new THREE.PlaneGeometry(100, 100), 
          new THREE.MeshBasicMaterial({
            color: 0xdce776,
          })
        )
        groud.rotation.x = -Math.PI / 2;
        groud.position.y = -1.02;
        gsap.to(
          box.position, // 变化的属性
          {
            duration: 1, // 动画时常
            repeat: -1, // 动画循环次数，-1是无限循环
            x: 6, // 移动到这个位置
            yoyo: true, // 往复运动
            ease: 'none', // 匀速运动
          }
        )

        this.box = box;
        this.scene.add(box, groud);
      },
      createCamera () {
        // 透视相机 第二个相机
        const watcherCamera = new THREE.PerspectiveCamera(75, this.width / this.height, 0.1, 1000)
        // 设置相机位置
        watcherCamera.position.set(4, 8, 20)
        // 设置相机朝向
        watcherCamera.lookAt(this.scene.position)
        // 将相机添加到场景中
        this.scene.add(watcherCamera)
        this.watcherCamera = watcherCamera
        this.camera = watcherCamera
      },
      datGui () {
        const _this = this
        const gui = new dat.GUI();
      },
      // 添加辅助
      helpers () {
        // 创建辅助坐标系
        const axesHelper = new THREE.AxesHelper();

        const gridHelper = new THREE.GridHelper(20, 20, 0xf0f0f0)
        gridHelper.position.y = -1.01
        
        this.scene.add(axesHelper, gridHelper, )
      },
      render () {
        // 创建渲染器
        const renderer = new THREE.WebGLRenderer({
          canvas: this.canvas,
          antialias: true
        })

        // 设置渲染器屏幕像素比 移动端解决像素问题
        renderer.setPixelRatio(window.devicePixelRatio || 1)
        // 设置渲染器大小
        renderer.setSize(this.width, this.height)
        // 执行渲染
        renderer.render(this.scene, this.camera)
        this.renderer = renderer
      },
      controls () {
        // 创建轨道控制器
        const orbitControls = new OrbitControls(this.camera, this.canvas)
        // 开启惯性
        orbitControls.enableDamping = true;
        this.orbitControls = orbitControls
      },
      // 射线
      raycaster: new THREE.Raycaster(),
      pointer: new THREE.Vector2(-1000, -1000), // 参数给大，防止自动触发Raycaster射线
      currentIntersect: null, // 当前交互对象
      tick () {
        // 更新射线
        this.raycaster.setFromCamera(this.pointer, this.camera);
        // 获取场景中，所有与鼠标交互的物体
        const objects = this.raycaster.intersectObjects([this.box])

        const target = objects[0]?.object; // 与鼠标交互的第一个物体对象
        if (target) {
          if (!this.currentIntersect) {
            this.currentIntersect = target;
          } 
        } else {
          if (this.currentIntersect) {
            this.currentIntersect = null;
          }
        }

        // 更新
        this.orbitControls.update()

        this.renderer.render(this.scene, this.camera)
        window.requestAnimationFrame(()=> this.tick())
      },
      fitView () {
        // 监听窗口大小变化
        window.addEventListener('resize', () =>{
          this.camera.aspect = window.innerWidth / window.innerHeight;
          this.camera.updateProjectionMatrix();
          this.renderer.setSize(window.innerWidth, window.innerHeight)
        }, false)
      },
      init () {
        this.createScene()
        this.createObjects()
        this.createCamera()
        this.helpers()
        this.render()
        this.controls()
        this.datGui()
        this.tick()
        this.fitView()

        // 先触发pointer的更新，点击时，物体的透明度就会变化了
        window.addEventListener('mousemove', (e) => {
          this.pointer.x = e.clientX / window.innerWidth * 2 - 1; // -1 ~ 1
          this.pointer.y = -(e.clientY / window.innerHeight) * 2 + 1; // -1 ~ 1
        })

        // click 事件未生效，是由于 AxesHelper 对象做了更新拦截
        window.addEventListener('pointerdown', (e) => {
          // this.pointer.x = e.clientX / window.innerWidth * 2 - 1; // -1 ~ 1
          // this.pointer.y = -(e.clientY / window.innerHeight) * 2 + 1; // -1 ~ 1

          if (this.currentIntersect) {
            const box = this.currentIntersect
            const boxCopy = new THREE.Mesh(
              new THREE.BoxGeometry(4, 4, 4),
              new THREE.MeshBasicMaterial({
                map: box.material.map,
              })
            )

            boxCopy.position.copy(box.position)
            gsap.to(
              boxCopy.position, {
                duration: 1, // 动画时常
                y: 1,
              }
            )

            this.scene.add(boxCopy)
          }
        })
      }
    }

    $.init();
  }, []);

  return <>
    <canvas id="c" />;
  </>
};

export default Page;
